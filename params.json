{"name":"Partitionable Array","tagline":"Undergraduate research project in data structure design taken from Ohio state university's page.","body":"### Welcome,\r\nIn this project, I have designed and developed a new data structure that stores a collection of `n` elements of type `T` and supports an operation that tells you how many elements satisfy a predicate `P` and an operation that returns the index of some element that satisfies `P` in constant time. This idea was borrowed from [OSU's](Undergrad research projects described at http://web.cse.ohio-state.edu/ugrad/ugResearchProjectsWengersList.pdf) page.\r\n\r\n***\r\n\r\n# Language\r\n\r\nI have been experimenting and using Scala for multiple projects recently, I thought I'd use it for this project too.\r\n\r\n***\r\n\r\n# Design\r\n\r\n* The data structure is instantiated by providing it with two arguments, a predicate `P` that is just a function from `T => Boolean` which tells if you the particular element of type `T` satisfies the predicate `P`. The second argument is an integer that indicates the size of the collection.\r\n\r\n* We maintain an internet `HashSet` of integers that contains the indices of all the elements that satisfy the provided predicate `P`. \r\n\r\n* The two important operations on the data structure are `getCount()` and `getOne()`. The usual `set(index, value)` and `get(index)` operations that are part of every array are implemented as well.\r\n\r\n# Supported functions\r\n\r\n* `set(index : Integer, value : T)`: When an element is added, we first check if the position that it is to be set is currently not occupied by any other element. If it isn't we simply set the value at particular index and if it satisfies `P`, add this index to our `HashSet`. If the index is already occupied by another element, we have to handle two cases. If the original element at that index satisfies the predicate `P`, it is to be removed from the internal `HashSet`. If it did not satisfy the predicate in the first place, we can simply remove it. Now, we are free to set the new value to the given index, and as before, to the `HashSet` if it satisfies `P`.\r\n\r\n* `get(index : Integer)`: This operation is relatively simple, it simply returns the value at the particular `index` in constant time.\r\n\r\n* `getCount()`: Due to the internally maintained `HashSet`, this operation simply involves returning the cardinality of that set in constant time. \r\n\r\n* `getOne()`: The first element of our maintained `HashSet` is returned in constant time.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}